/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package bibliotecaAdministrador.CopiasLibro;

import bibliotecaAdministrador.ConexionBD;
import bibliotecaAdministrador.PaginaPrincipalAdministrador;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.HashSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author g
 */
public class CopiasLibros extends javax.swing.JFrame {

    /**
     * Creates new form CopiasLibros
     */
    ConexionBD conecta;
    ResultSet res;
    public CopiasLibros() {
        initComponents();
        txtIdCopia.setVisible(false);
        //txtTitulo.setEnabled(false);
        tablaCL();
        this.setLocationRelativeTo(null);
        // mUsuarios.addActionListener(this);
        this.setTitle("BIBLIOTECA");
        this.setIconImage(getIconImage());
        
    }
    
    @Override
    public Image getIconImage(){
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("img/library.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panelCL = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        Guardar = new javax.swing.JButton();
        Actualizar = new javax.swing.JButton();
        Borrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTablaCL = new javax.swing.JTable();
        Regresar = new javax.swing.JButton();
        txtIdCopia = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        txtTit = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("COPIAS DE LIBROS REGISTRADAS");

        txtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodigoKeyTyped(evt);
            }
        });

        jLabel2.setText("Codigo Libro");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search.png"))); // NOI18N
        jButton1.setText("BUSCAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/nuevo.png"))); // NOI18N
        Guardar.setText("NUEVO");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        Actualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit.png"))); // NOI18N
        Actualizar.setText("EDITAR");
        Actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarActionPerformed(evt);
            }
        });

        Borrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/borrar.png"))); // NOI18N
        Borrar.setText("BORRAR");
        Borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarActionPerformed(evt);
            }
        });

        jtTablaCL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtTablaCL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtTablaCLMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtTablaCL);

        Regresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/regresar.png"))); // NOI18N
        Regresar.setText("REGRESAR");
        Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelCLLayout = new javax.swing.GroupLayout(panelCL);
        panelCL.setLayout(panelCLLayout);
        panelCLLayout.setHorizontalGroup(
            panelCLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCLLayout.createSequentialGroup()
                .addGroup(panelCLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelCLLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(txtIdCopia, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(147, 147, 147)
                        .addComponent(jLabel1))
                    .addGroup(panelCLLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelCLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelCLLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(42, 42, 42)
                                .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(74, 74, 74))
                            .addGroup(panelCLLayout.createSequentialGroup()
                                .addComponent(Regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Borrar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(24, 24, 24))
            .addGroup(panelCLLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCLLayout.createSequentialGroup()
                        .addComponent(jSeparator3)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCLLayout.createSequentialGroup()
                        .addGap(0, 17, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))
                    .addComponent(jSeparator4)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCLLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(txtTit, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(229, 229, 229))
        );
        panelCLLayout.setVerticalGroup(
            panelCLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCLLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(panelCLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIdCopia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(32, 32, 32)
                .addGroup(panelCLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtTit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelCLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Regresar)
                    .addComponent(Borrar)
                    .addComponent(Actualizar)
                    .addComponent(Guardar))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelCL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelCL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(!txtCodigo.getText().equals("")){
            try{
                DefaultTableModel modelo = new DefaultTableModel();
                conecta = new ConexionBD();
                jtTablaCL.setModel(modelo);
                String sql = "SELECT c.id_copia,c.codigo_copia, e.descripcion, l.titulo FROM copias c INNER JOIN libros l ON c.id_libro=l.id_libro INNER JOIN estados e ON c.id_estado=e.id_estado where l.id_libro="+Integer.parseInt(txtCodigo.getText());
                res = conecta.consultar(sql);

                ResultSetMetaData rsMd = (ResultSetMetaData) res.getMetaData();
                int cantidadColumnas = rsMd.getColumnCount();
                modelo.addColumn("ID");
                //modelo.addColumn("Libro");
                modelo.addColumn("CodigoCopia");
                modelo.addColumn("Estado");

                int []anchos = {50,100,100};
                for(int i=0;i<jtTablaCL.getColumnCount();i++){
                    jtTablaCL.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
                }
                while (res.next()) {
                    Object[] filas = new Object[cantidadColumnas];
                    for (int i = 0; i < cantidadColumnas; i++) {
                        filas[i] = res.getObject(i + 1);
                    }
                    modelo.addRow(filas);
                    txtTit.setText("Titulo del Libro: "+res.getString("titulo"));
                }
            }catch(Exception e){
                System.out.println("Error al mostrar datos en la tabla copias: "+e.getMessage());
            }finally{
                conecta.cerrar();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Por Favor ingrese el codigo del Libro");
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        // TODO add your handling code here:
        /*if(!txtCodigo.getText().equals("") && !txtCodigoCopia.getText().equals("") && !txtCopia.getText().equals("") && cmbEstado.getSelectedIndex()>0){
            conecta = new ConexionBD();
            try {
                String sqlConsulta="SELECT id_estado FROM estados WHERE descripcion='"+cmbEstado.getSelectedItem().toString()+"'";
                res = conecta.consultar(sqlConsulta);
                int idE=0;
                while(res.next()){
                    idE = res.getInt("id_estado");
                }
                String sqlAlta="INSERT INTO copias VALUES(null, "+Integer.parseInt(txtCodigo.getText())+", "+idE+", '"+txtCodigoCopia.getText()+"', "+Integer.parseInt(txtCopia.getText())+")";
                System.out.println(sqlAlta);
                conecta.operacionesAMB(sqlAlta);
                JOptionPane.showMessageDialog(null, "Registro exitoso");
                txtIdCopia.setText("");
                txtCodigo.setText("");
                txtCodigoCopia.setText("");
                txtCopia.setText("");
                cmbEstado.setSelectedItem(0);
                txtTitulo.setText("");
                txtGenero.setText("");
            }catch(SQLException ex){
                System.out.println("error sql al dar de alta copia: "+ex.getMessage());
                JOptionPane.showMessageDialog(null, "error sql al dar de alta copia: "+ex.getMessage());
            } 
            catch (Exception e) {
                System.out.println("error al dar de alta la copia: "+e.getMessage());
                JOptionPane.showMessageDialog(null, "error al dar de alta copia: "+e.getMessage());
            }
            panelCL.remove(jtTablaCL);  
                tablaCL();
                repaint();
        }else{
            JOptionPane.showMessageDialog(null, "Por Favor llena todos los campos");
        }*/
        Guardar gu = new Guardar();
        gu.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_GuardarActionPerformed

    private void jtTablaCLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtTablaCLMouseClicked
        // TODO add your handling code here:
        conecta = new ConexionBD();
        ResultSet res;
        try{
            int Fila = jtTablaCL.getSelectedRow();
            String id = jtTablaCL.getValueAt(Fila, 0).toString();
            //String sqlConsulta = "SELECT c.id_copia, l.id_libro, l.titulo, e.id_estado, e.descripcion , c.codigo_copia, c.numero_copia FROM copias c INNER JOIN libros l ON c.id_libro=l.id_libro INNER JOIN estados e ON c.id_estado=e.id_estado  where id_copia="+Integer.parseInt(id);
            String sqlConsulta="SELECT id_copia FROM copias WHERE id_copia="+id;
            res = conecta.consultar(sqlConsulta);
            while(res.next()){
                /*txtIdCopia.setText(res.getString("id_copia"));
                txtCodigo.setText(res.getString("id_libro"));
                txtCodigoCopia.setText(res.getString("codigo_copia"));
                txtCopia.setText(res.getString("numero_copia"));
                cmbEstado.setSelectedItem(res.getString("descripcion"));
                txtTitulo.setText(res.getString("titulo"));
                txtGenero.setText(res.getString("descripcion"));*/
                txtIdCopia.setText(res.getString("id_copia"));
            }
        }catch (Exception e){
            System.out.println("error al cargar datos de la tabla a los campos en los prestamos: "+e.getMessage());
            
        }finally{
            conecta.cerrar();
        }
    }//GEN-LAST:event_jtTablaCLMouseClicked

    private void ActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarActionPerformed
        // TODO add your handling code here:
        /*if(!txtCodigo.getText().equals("") && !txtCodigoCopia.getText().equals("") && !txtCopia.getText().equals("") && cmbEstado.getSelectedIndex()>0 && !txtIdCopia.getText().equals("")){
            conecta = new ConexionBD();
        
            try{
                String sqlConsulta="SELECT id_estado FROM estados WHERE descripcion='"+cmbEstado.getSelectedItem().toString()+"'";
                res = conecta.consultar(sqlConsulta);
                int idE=0;
                while(res.next()){
                    idE = res.getInt("id_estado");
                }
                String sqlactualiza = "UPDATE copias set id_libro="+Integer.parseInt(txtCodigo.getText())+", id_estado="+idE+", codigo_copia='"+txtCodigoCopia.getText()+"', numero_copia="+Integer.parseInt(txtCopia.getText())+" where id_copia='"+txtIdCopia.getText()+"'";
                System.out.println(sqlactualiza);
                conecta.operacionesAMB(sqlactualiza);
                JOptionPane.showMessageDialog(null, "Registro Actualizado");
                txtIdCopia.setText("");
                txtCodigo.setText("");
                txtCodigoCopia.setText("");
                txtCopia.setText("");
                cmbEstado.setSelectedItem(0);
                txtTitulo.setText("");
                txtGenero.setText("");
            }catch(SQLException ex){
                System.out.println("Error al actualizar copias"+ex.getMessage());
                JOptionPane.showMessageDialog(null, "No se pudo actualizar el registro en copias error sql: "+ex.getMessage());
            }
            catch (Exception e){
                System.out.println("Error al actualizar numero de copias"+e.getMessage());
                JOptionPane.showMessageDialog(null, "Error al actualizar numero de copias");
            }finally{
                conecta.cerrar();
            }
            panelCL.remove(jtTablaCL);  
            tablaCL();
            repaint();
        }else{
            JOptionPane.showMessageDialog(null, "Por Favor seleccione un elemento de la tabla y asegurese de llenar todos los campos");
        }*/
        if(!txtIdCopia.getText().equals("")){
            Actualizar ac = new Actualizar();
            ac.setNombre(txtIdCopia.getText());
            ac.setVisible(true);
            this.setVisible(false);
        }else{
            JOptionPane.showMessageDialog(null, "Por Favor seleccione un registro de la tabla");
        }
    }//GEN-LAST:event_ActualizarActionPerformed

    private void BorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarActionPerformed
        // TODO add your handling code here:
        if(!txtCodigo.getText().equals("")){
            conecta=new ConexionBD();
            try {
                String sqldelete = "DELETE FROM copias where id_copia='"+txtIdCopia.getText()+"'";
                conecta.operacionesAMB(sqldelete);
                JOptionPane.showMessageDialog(null, "Registro eliminado");
                txtIdCopia.setText("");
                txtCodigo.setText("");
            } catch(SQLException ex){
                System.out.println("Error al borrar copias"+ex.getMessage());
                JOptionPane.showMessageDialog(null, "No se pudo borrar el registro en copias error sql: "+ex.getMessage());
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al eliminar al numero de copias");
                System.out.println("Error al eliminar numero de copias "+e.getMessage());
            }finally{
                conecta.cerrar();
            }
            panelCL.remove(jtTablaCL);  
            tablaCL();
            repaint();
        }else{
            JOptionPane.showMessageDialog(null, "Por Favor selecciona un elemento de la tabla");
        }
        
    }//GEN-LAST:event_BorrarActionPerformed

    private void RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegresarActionPerformed
        // TODO add your handling code here:
        PaginaPrincipalAdministrador prin = new PaginaPrincipalAdministrador();
        prin.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_RegresarActionPerformed

    private void txtCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCodigoKeyTyped

    /*void tablaCL(){
        try{
            DefaultTableModel modelo = new DefaultTableModel();
            conecta = new ConexionBD();
            jtTablaCL.setModel(modelo);
            String sql = "SELECT c.id_copia, l.titulo,c.codigo_copia, e.descripcion FROM copias c INNER JOIN libros l ON c.id_libro=l.id_libro INNER JOIN estados e ON c.id_estado=e.id_estado";
            res = conecta.consultar(sql);

            ResultSetMetaData rsMd = (ResultSetMetaData) res.getMetaData();
            int cantidadColumnas = rsMd.getColumnCount();
            modelo.addColumn("ID");
            modelo.addColumn("Libro");
            modelo.addColumn("CodigoCopia");
            modelo.addColumn("Estado");
            
            int []anchos = {50, 100,100,100};
            for(int i=0;i<jtTablaCL.getColumnCount();i++){
                jtTablaCL.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
            }
            while (res.next()) {
                Object[] filas = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    filas[i] = res.getObject(i + 1);
                }
                modelo.addRow(filas);
            }
        }catch(Exception e){
            System.out.println("Error al mostrar datos en la tabla copias: "+e.getMessage());
        }finally{
            conecta.cerrar();
        }
    }*/
    void tablaCL() {
    try {
        DefaultTableModel modelo = new DefaultTableModel();
        conecta = new ConexionBD();
        jtTablaCL.setModel(modelo);
        String sql = "SELECT c.id_copia, l.titulo, c.codigo_copia, e.descripcion FROM copias c INNER JOIN libros l ON c.id_libro=l.id_libro INNER JOIN estados e ON c.id_estado=e.id_estado";
        res = conecta.consultar(sql);

        ResultSetMetaData rsMd = (ResultSetMetaData) res.getMetaData();
        int cantidadColumnas = rsMd.getColumnCount();
        modelo.addColumn("ID");
        modelo.addColumn("Libro");
        modelo.addColumn("CodigoCopia");
        modelo.addColumn("Estado");

        int[] anchos = { 50, 100, 100, 100 };
        for (int i = 0; i < jtTablaCL.getColumnCount(); i++) {
            jtTablaCL.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }

        // Usaremos un HashSet para almacenar los títulos de libros ya agregados
        HashSet<String> titulosAgregados = new HashSet<>();

        while (res.next()) {
            Object[] filas = new Object[cantidadColumnas];

            // Verificar si el título ya se agregó
            String tituloLibro = res.getString("titulo");
            if (titulosAgregados.contains(tituloLibro)) {
                filas[1] = ""; // Puedes usar un espacio en blanco o un valor nulo
            } else {
                filas[1] = tituloLibro;
                titulosAgregados.add(tituloLibro);
            }

            // Resto de las columnas
            for (int i = 0; i < cantidadColumnas; i++) {
                filas[i == 1 ? i + 1 : i] = res.getObject(i + 1);
            }

            modelo.addRow(filas);
        }
    } catch (Exception e) {
        System.out.println("Error al mostrar datos en la tabla copias: " + e.getMessage());
    } finally {
        conecta.cerrar();
    }
}




    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
         try {
            //UIManager.setLookAndFeel( new FlatLightLaf() );
            FlatMacLightLaf.setup();
        } catch( Exception ex ) {
            System.err.println( "Failed to initialize LaF" );
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CopiasLibros().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Actualizar;
    private javax.swing.JButton Borrar;
    private javax.swing.JButton Guardar;
    private javax.swing.JButton Regresar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTable jtTablaCL;
    private javax.swing.JPanel panelCL;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtIdCopia;
    private javax.swing.JTextField txtTit;
    // End of variables declaration//GEN-END:variables
}
