/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package bibliotecaAdministrador.Usuario;
import bibliotecaAdministrador.ConexionBD;
import bibliotecaAdministrador.PaginaPrincipalAdministrador;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author g
 */
public class Usuarios extends javax.swing.JFrame {

    
    /**
     * Creates new form Usuarios
     */
    ConexionBD conecta;
    ResultSet res;
    public Usuarios() {
        initComponents();
        tabla();
        txtid.setVisible(false);
        this.setLocationRelativeTo(null);
        this.setTitle("BIBLIOTECA");
        this.setIconImage(getIconImage());
    }

    @Override
    public Image getIconImage(){
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("img/library.png"));
        return retValue;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelU = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnguardar = new javax.swing.JButton();
        btnactualizar = new javax.swing.JButton();
        btnborrar = new javax.swing.JButton();
        txtid = new javax.swing.JTextField();
        btnbuscar = new javax.swing.JButton();
        btnregresar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtUsuarios = new javax.swing.JTable();
        txtNum = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("USUARIOS REGISTRADOS");

        btnguardar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnguardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/nuevo.png"))); // NOI18N
        btnguardar.setText("NUEVO");
        btnguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnguardarActionPerformed(evt);
            }
        });

        btnactualizar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnactualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit.png"))); // NOI18N
        btnactualizar.setText("EDITAR");
        btnactualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnactualizarActionPerformed(evt);
            }
        });

        btnborrar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnborrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/borrar.png"))); // NOI18N
        btnborrar.setText("BORRAR");
        btnborrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnborrarActionPerformed(evt);
            }
        });

        txtid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtidKeyTyped(evt);
            }
        });

        btnbuscar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnbuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search.png"))); // NOI18N
        btnbuscar.setText("BUSCAR");
        btnbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscarActionPerformed(evt);
            }
        });

        btnregresar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnregresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/regresar.png"))); // NOI18N
        btnregresar.setText("REGRESAR");
        btnregresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnregresarActionPerformed(evt);
            }
        });

        jtUsuarios.setAutoCreateRowSorter(true);
        jtUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title5"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtUsuariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtUsuarios);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("No. Control");

        javax.swing.GroupLayout panelULayout = new javax.swing.GroupLayout(panelU);
        panelU.setLayout(panelULayout);
        panelULayout.setHorizontalGroup(
            panelULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelULayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(36, 36, 36)
                .addGroup(panelULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                    .addComponent(txtNum))
                .addGap(335, 335, 335))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelULayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnregresar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnguardar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelULayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnactualizar)
                        .addGap(18, 18, 18)
                        .addComponent(btnborrar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelULayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(panelULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(39, 39, 39))
            .addGroup(panelULayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 787, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelULayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator1))
                .addGap(19, 19, 19))
        );
        panelULayout.setVerticalGroup(
            panelULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelULayout.createSequentialGroup()
                .addGroup(panelULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelULayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelULayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(26, 26, 26)))
                .addGroup(panelULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnbuscar)
                    .addComponent(txtNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(panelULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnregresar)
                    .addComponent(btnborrar)
                    .addComponent(btnactualizar)
                    .addComponent(btnguardar))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnguardarActionPerformed
        // TODO add your handling code here:
        //----------------------
        /*if(!txtnombre.getText().equals("") && !txtapp.getText().equals("") && !txtapm.getText().equals("") && !txttel.getText().equals("") && !txtContra.getText().equals("") && cmbTipos.getSelectedIndex()>0){
            conecta = new ConexionBD();
            ResultSet resC;
            String idT="";
            String consulta="SELECT id_tipo FROM tipos where descripcion='"+cmbTipos.getSelectedItem()+"'";
            resC = conecta.consultar(consulta);
            try {
                while(resC.next()){
                    idT=resC.getString("id_tipo");
                }
            } catch (Exception e) {
                System.out.println("error al obtener el id del tipo de usuario: "+e.getMessage());
            }
            System.out.println(idT);*/
            
            //------------------------
            
            /*String sqlalta ="insert into usuarios values(null,'"+txtnombre.getText()+"','"+txtapp.getText()+"','"+txtapm.getText()+"','"+txttel.getText()+"','"+txtContra.getText()+"',"+idT+")";
            System.out.println(sqlalta);
            try{
                conecta.operacionesAMB(sqlalta);
                JOptionPane.showMessageDialog(null, "Registro Exitoso");
                //refrescarTabla();
            }catch(Exception e){
                System.out.println("Error al insertar usuario"+e.getMessage());
                JOptionPane.showMessageDialog(null, "No se pudo realizar el registro");
            }finally{
                conecta.cerrar();
            }*/
        //--------------------------------
            /*registrarUsuario(txtnombre.getText(), txtapp.getText(), txtapm.getText(), txttel.getText(), txtContra.getText(), Integer.parseInt(idT));

            panelU.remove(jtUsuarios);  
            tabla();
            repaint();
            txtnombre.setText("");
            txtapp.setText("");
            txtapm.setText("");
            txttel.setText("");
            txtContra.setText("");
            cmbTipos.setSelectedIndex(0);
        }
        else{
            JOptionPane.showMessageDialog(null, "Por favor llena todos los campos");
        }*/
        //-------------------
        Guardar gu = new Guardar();
        gu.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnguardarActionPerformed

    private void btnbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscarActionPerformed
        // TODO add your handling code here:
        /*if(!txtnombre.getText().equals("") && !txtapp.getText().equals("") && ! txtapm.getText().equals("")){
            String sqlconsulta = "SELECT u.id_usuario, u.nombre, u.ap, u.am, u.telefono, contrasena, t.descripcion FROM usuarios u inner join tipos t on u.id_tipo=t.id_tipo where u.nombre='"+txtnombre.getText()+"' and u.ap='"+txtapp.getText()+"' and u.am='"+txtapm.getText()+"'";
            
        }*/
        
        /*if(!txtid.getText().equals("")){
            String where="";
            where = " WHERE id_usuario =" + Integer.parseInt(txtid.getText()) + "";
            String sqlconsulta = "SELECT u.id_usuario, u.nombre, u.ap, u.am, u.telefono, u.contrasena, t.descripcion FROM usuarios u inner join tipos t on u.id_tipo=t.id_tipo"+where;
            conecta = new ConexionBD();
            System.out.println(sqlconsulta);
            res = conecta.consultar(sqlconsulta);
            try{
                if(res.next()){
                    txtnombre.setText(res.getString("nombre"));
                    txtapp.setText(res.getString("ap"));
                    txtapm.setText(res.getString("am"));
                    txttel.setText(res.getString("telefono"));
                    txtContra.setText(res.getString("contrasena"));
                }
                else{
                    JOptionPane.showMessageDialog(null, "Usuario no encontrado");
                }
            }catch(Exception e){
                System.out.println("Error al buscar usuario"+e.getMessage());
                JOptionPane.showMessageDialog(null, "Usuario no encontrado");
            }finally{
                conecta.cerrar();
            }
        }else{
            JOptionPane.showMessageDialog(null, "Por favor ingresa el codigo del usuario");
        }*/
        try{
            DefaultTableModel modelo = new DefaultTableModel();
            conecta = new ConexionBD();
            jtUsuarios.setModel(modelo);
            String sql="Select id_usuario, nombre, ap, am, telefono from usuarios WHERE id_usuario="+Integer.parseInt(txtNum.getText());
            res = conecta.consultar(sql);
            ResultSetMetaData rsMd = (ResultSetMetaData) res.getMetaData();
            int cantidadColumnas = rsMd.getColumnCount();
            modelo.addColumn("ID");
            modelo.addColumn("Nombre");
            modelo.addColumn("Apellido Paterno");
            modelo.addColumn("Apellido Materno");
            modelo.addColumn("Telefono");
            
            int []anchos = {20, 150,150,150,150};
            for(int i=0;i<jtUsuarios.getColumnCount();i++){
                jtUsuarios.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
            }
            while (res.next()) {
                Object[] filas = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    filas[i] = res.getObject(i + 1);
                }
                modelo.addRow(filas);
            }
        }catch(SQLException ex){
            System.out.println("error sql tabla libros: "+ex.getMessage());
        }
        catch(Exception e){
            System.out.println("Error al mostrar datos de la tabla de libros: "+e.getMessage());
        }
        finally{
            conecta.cerrar();
        }
    }//GEN-LAST:event_btnbuscarActionPerformed

    private void btnactualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnactualizarActionPerformed
        // TODO add your handling code here:
        /*conecta = new ConexionBD();
        String sqlactualiza = "UPDATE usuarios set nombre='"+txtnombre.getText()+"', ap='"+txtapp.getText()+"', am='"+txtapm.getText()+"',"
                + "telefono='"+txttel.getText()+"' where id_usuario='"+txtid.getText()+"';";
        System.out.println(sqlactualiza);
        try{
            conecta.operacionesAMB(sqlactualiza);
            JOptionPane.showMessageDialog(null, "Registro actualizado");
            txtnombre.setText("");
            txtapp.setText("");
            txtapm.setText("");
            txttel.setText("");
            txtid.setText("");
        }catch(SQLException ex){
            System.out.println("Error al insertar actualizar usuario sql"+ex.getMessage());
            JOptionPane.showMessageDialog(null, "No se pudo actualizar el registro en usuarios error sql: "+ex.getMessage());
        }
        catch(Exception e){
            System.out.println("Error al actualizar usuario"+e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al actualizar al usuario");
        }finally{
            conecta.cerrar();
        }
        panelU.remove(jtUsuarios);  
        tabla();
        repaint();*/
        if(!txtid.getText().equals("")){
            Actualizar ac = new Actualizar();
            ac.setNombre(txtid.getText());
            ac.setVisible(true);
            this.setVisible(false);
        }else{
            JOptionPane.showMessageDialog(null, "Por Favor seleccione un registro de la tabla");
        }
    }//GEN-LAST:event_btnactualizarActionPerformed

    private void btnborrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnborrarActionPerformed
        // TODO add your handling code here:
        if(!txtid.getText().equals("")){
            conecta = new ConexionBD();
            try{
                String sqldelete = "DELETE FROM usuarios where id_usuario='"+txtid.getText()+"'";
                conecta.operacionesAMB(sqldelete);
                JOptionPane.showMessageDialog(null, "Registro eliminado");
                txtid.setText("");
            }catch(SQLException ex){
                System.out.println("Error al borrar usuario error sql"+ex.getMessage());
                JOptionPane.showMessageDialog(null, "No se pudo borrar el registro en usuarios error sql: "+ex.getMessage());
            }
            catch (Exception e){ 
                JOptionPane.showMessageDialog(null, "Error al eliminar al usuario");
                System.out.println("Error al eliminar al usuario "+e.getMessage());
            }finally{
                conecta.cerrar();
            }
            panelU.remove(jtUsuarios);  
            tabla();
            repaint();
        }else{
            JOptionPane.showMessageDialog(null, "Por Favor seleccione un registro de la tabla");
        }
        
    }//GEN-LAST:event_btnborrarActionPerformed

    private void btnregresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnregresarActionPerformed
        // TODO add your handling code here:
        PaginaPrincipalAdministrador prin = new PaginaPrincipalAdministrador();
        prin.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnregresarActionPerformed

    private void txtidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtidKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtidKeyTyped

    private void jtUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtUsuariosMouseClicked
        // TODO add your handling code here:
        conecta = new ConexionBD();
        ResultSet res;
        try{
            int Fila = jtUsuarios.getSelectedRow();
            String id = jtUsuarios.getValueAt(Fila, 0).toString();
            String sqlConsulta = "SELECT id_usuario, nombre FROM usuarios WHERE id_usuario="+Integer.parseInt(id);
            res = conecta.consultar(sqlConsulta);
            while(res.next()){
                txtid.setText(res.getString("id_usuario"));
            }
        }catch (Exception e){
            System.out.println("error al cargar datos de la tabla a los campos en los usuarios: "+e.getMessage());
            
        }finally{
            conecta.cerrar();
        }
    }//GEN-LAST:event_jtUsuariosMouseClicked


void tabla(){
    try{
            DefaultTableModel modelo = new DefaultTableModel();
            conecta = new ConexionBD();
            jtUsuarios.setModel(modelo);
            String sql = "Select id_usuario, nombre, ap, am, telefono from usuarios ORDER BY id_usuario";
            res = conecta.consultar(sql);
            
            ResultSetMetaData rsMd = (ResultSetMetaData) res.getMetaData();
            int cantidadColumnas = rsMd.getColumnCount();
            modelo.addColumn("ID");
            modelo.addColumn("Nombre");
            modelo.addColumn("Apellido Paterno");
            modelo.addColumn("Apellido Materno");
            modelo.addColumn("Telefono");
            
            int []anchos = {50, 150, 150,150,100};
            for(int i=0;i<jtUsuarios.getColumnCount();i++){
                jtUsuarios.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
            }
            while (res.next()) {
                Object[] filas = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    filas[i] = res.getObject(i + 1);
                }
                modelo.addRow(filas);
            }
            
        }catch(Exception e){
            System.out.println("Error al mostrar datos en la tabla: "+e.getMessage());
        }
        finally{
            conecta.cerrar();
        }
}

    /*void llenar_tipos(){
        try {
            ResultSet resT;
            conecta = new ConexionBD();
            String sqlGenero ="Select id_tipo, descripcion from tipos";
            resT = conecta.consultar(sqlGenero);
            //System.out.println(resGenero);
            while(resT.next()){
                String descripcion = resT.getString("descripcion");
                cmbTipos.addItem(descripcion);
            }
        } catch (Exception e) {
            System.out.println("Error al llenar combo de tipos: "+e.getMessage());
        }finally{
            conecta.cerrar();
        }
    }*/
    /*public void registrarUsuario(String nombre, String ap, String am, String telefono, String contrasena, int id_tipo) {
        try {
            conecta = new ConexionBD();
            CallableStatement cs = conecta.conn.prepareCall("{call RegistrarUsuario(?, ?, ?, ?, ?, ?, ?)}");
            cs.setString(1, nombre);
            cs.setString(2, ap);
            cs.setString(3, am);
            cs.setString(4, telefono);
            cs.setString(5, contrasena);
            cs.setInt(6, id_tipo);
            cs.registerOutParameter(7, Types.VARCHAR);

            // Ejecutar el procedimiento almacenado
            cs.execute();

            // Obtener el mensaje de salida del procedimiento
            String mensaje = cs.getString(7);
            JOptionPane.showMessageDialog(null, mensaje);

            cs.close();
        }catch(SQLException ex){
            System.out.println("Error al insertar usuario error sql"+ex.getMessage());
            JOptionPane.showMessageDialog(null, "No se pudo realizar el registro en usuarios error sql: "+ex.getMessage());
        } 
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al registrar usuario: " + e.getMessage());
        } finally {
            conecta.cerrar();
        }
    }*/


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        try {
            //UIManager.setLookAndFeel( new FlatLightLaf() );
            FlatMacLightLaf.setup();
        } catch( Exception ex ) {
            System.err.println( "Failed to initialize LaF" );
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Usuarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnactualizar;
    private javax.swing.JButton btnborrar;
    private javax.swing.JButton btnbuscar;
    private javax.swing.JButton btnguardar;
    private javax.swing.JButton btnregresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jtUsuarios;
    private javax.swing.JPanel panelU;
    private javax.swing.JTextField txtNum;
    private javax.swing.JTextField txtid;
    // End of variables declaration//GEN-END:variables
}
