/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package bibliotecaAdministrador.Libro;

import bibliotecaAdministrador.ConexionBD;
import bibliotecaAdministrador.PaginaPrincipalAdministrador;
import com.formdev.flatlaf.intellijthemes.FlatCobalt2IJTheme;
import com.formdev.flatlaf.intellijthemes.FlatCyanLightIJTheme;
import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatGitHubIJTheme;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author g
 */
public class Libros extends javax.swing.JFrame {

    /**
     * Creates new form Libros
     */
    ConexionBD conecta;
    ResultSet res, resGenero, resEstado, resCopia;
    
    
    
    public Libros() {
        initComponents();
        tablaL();
        //llenar_genero();
        this.setLocationRelativeTo(null);
        this.setTitle("BIBLIOTECA");
        this.setIconImage(getIconImage());
        txtId.setVisible(false);
    }

    @Override
    public Image getIconImage(){
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("img/library.png"));
        return retValue;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelL = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        txtId = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtLibros = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("LIBROS");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Titulo");

        txtId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIdKeyTyped(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search.png"))); // NOI18N
        btnBuscar.setText("BUSCAR");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/regresar.png"))); // NOI18N
        btnRegresar.setText("REGRRESAR  ");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/nuevo.png"))); // NOI18N
        btnGuardar.setText("NUEVO");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit.png"))); // NOI18N
        btnActualizar.setText("EDITAR");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/borrar.png"))); // NOI18N
        btnBorrar.setText("BORRAR  ");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        jtLibros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jtLibros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtLibrosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtLibros);

        javax.swing.GroupLayout panelLLayout = new javax.swing.GroupLayout(panelL);
        panelL.setLayout(panelLLayout);
        panelLLayout.setHorizontalGroup(
            panelLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLLayout.createSequentialGroup()
                .addGap(0, 265, Short.MAX_VALUE)
                .addComponent(btnRegresar)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnActualizar)
                .addGap(18, 18, 18)
                .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
            .addGroup(panelLLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96))
            .addGroup(panelLLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLLayout.createSequentialGroup()
                        .addGroup(panelLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(383, 383, 383))))
        );
        panelLLayout.setVerticalGroup(
            panelLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(panelLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(panelLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscar)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 63, Short.MAX_VALUE))
                    .addGroup(panelLLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRegresar)
                            .addComponent(btnGuardar)
                            .addComponent(btnActualizar)
                            .addComponent(btnBorrar))
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        Guardar guarda = new Guardar();
        guarda.setVisible(true);
        this.setVisible(false);
        // ---------------------------------------
        /*if(!txtTitulo.getText().equals("") && cmbGeneros.getSelectedIndex()>0){
            ResultSet resG;
            String idG="", idE="", idC="";
            conecta = new ConexionBD();
            String sql ="SELECT g.id_genero FROM generos g where g.descripcion='"+cmbGeneros.getSelectedItem()+"'";
            System.out.println(sql);
            resG = conecta.consultar(sql);
            try{
                while(resG.next()){
                    idG=resG.getString("id_genero");
                    System.out.println("hola1");
                }
                System.out.println(idG);
            }catch(Exception e){

            }*/
            
         // ---------------------------   
            /*String sqlAlta="INSERT INTO libros VALUES(null, '"+txtTitulo.getText()+"',"+Integer.parseInt(idG)+","+Integer.parseInt(idE)+","+Integer.parseInt(IDautor.getText())+","+idC+")";
            System.out.println(sqlAlta);
            try {
                conecta.operacionesAMB(sqlAlta);
                JOptionPane.showMessageDialog(null, "Registro exitoso");
                txtAutor.setText("");
                txtTitulo.setText("");
                cmbCopias.setSelectedIndex(0);
                cmbEstados.setSelectedIndex(0);
                cmbGeneros.setSelectedIndex(0);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "No se pudo realizar el registro");
                System.out.println("error al guardar libro: "+e.getMessage());
            }finally{
                conecta.cerrar();
            }*/
        
        // ------------------------------
            /*registrarLibro(txtTitulo.getText(), Integer.parseInt(idG));
            txtTitulo.setText("");
            cmbGeneros.setSelectedIndex(0);
        }else{
            JOptionPane.showMessageDialog(null, "Por Favor asegurate de llenar todos los campos y de buscar al autor");
        }
        panelL.remove(jtLibros);  
        tablaL();
        repaint();*/
        //------------------------------
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        /*String id = txtTitulo.getText();
        String where="";
        if(!"".equals(id)){
                where = "WHERE l.titulo = '" + id + "'";
                String sqlconsulta = "SELECT l.id_libro, l.titulo, g.descripcion FROM libros l INNER JOIN generos g on l.id_genero=g.id_genero  "+where;
            conecta = new ConexionBD();
            System.out.println(sqlconsulta);
            ResultSet res = conecta.consultar(sqlconsulta);
            try{
                while(res.next()){
                    txtTitulo.setText(res.getString("titulo"));
                    //cmbGeneros.setSelectedItem(res.getString("descripcion"));
                }
            }catch(Exception e){
                System.out.println("Error al buscar estado"+e.getMessage());
                JOptionPane.showMessageDialog(null, "Estado no encontrado");
            }finally{
                conecta.cerrar();
            }
        }else{
            JOptionPane.showMessageDialog(null, "Por Favor ingresa el ID del libro a buscar");
        }*/
        try{
            DefaultTableModel modelo = new DefaultTableModel();
            conecta = new ConexionBD();
            jtLibros.setModel(modelo);
            //String sql="SELECT l.id_libro, l.titulo, g.descripcion FROM libros l INNER JOIN generos g ON l.id_genero=g.id_genero WHERE l.titulo='"+txtTitulo.getText()+"'";
            String sql="SELECT\n" +
            "    l.id_libro,\n" +
            "    l.titulo,\n" +
            "    g.descripcion,\n" +
            "    (\n" +
            "        SELECT CONCAT(a.nombre,' ',a.ap,' ',a.am)\n" +
            "        FROM autores a\n" +
            "        INNER JOIN asigna_autores aa ON aa.id_autor = a.id_autor\n" +
            "        WHERE aa.id_libro = l.id_libro\n" +
            "        LIMIT 1\n" +
            "    ) AS autor,\n" +
            "    (\n" +
            "        SELECT COUNT(c.codigo_copia)\n" +
            "        FROM copias c\n" +
            "        WHERE c.id_libro = l.id_libro\n" +
            "    ) AS copias\n" +
            "FROM\n" +
            "    libros l\n" +
            "INNER JOIN generos g ON l.id_genero = g.id_genero\n" +
            "WHERE l.titulo='"+txtTitulo.getText()+"'";
            res = conecta.consultar(sql);
            ResultSetMetaData rsMd = (ResultSetMetaData) res.getMetaData();
            int cantidadColumnas = rsMd.getColumnCount();
            modelo.addColumn("ID");
            modelo.addColumn("Titulo");
            modelo.addColumn("Genero");
            modelo.addColumn("Autor Principal");
            modelo.addColumn("No. Copias Totales");
            
            int []anchos = {20, 220,80,150,150};
            for(int i=0;i<jtLibros.getColumnCount();i++){
                jtLibros.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
            }
            while (res.next()) {
                Object[] filas = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    filas[i] = res.getObject(i + 1);
                }
                modelo.addRow(filas);
            }
        }catch(SQLException ex){
            System.out.println("error sql tabla libros: "+ex.getMessage());
        }
        catch(Exception e){
            System.out.println("Error al mostrar datos de la tabla de libros: "+e.getMessage());
        }
        finally{
            conecta.cerrar();
        }
        
        
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        if(!txtId.getText().equals("")){
            Actualizar act = new Actualizar();
            act.setNombre(txtId.getText());
            act.setVisible(true);
            this.setVisible(false);
        }else{
            JOptionPane.showMessageDialog(null, "Por Favor seleccione un registro de la tabla");
        }
        /*if(!txtTitulo.getText().equals("") && cmbGeneros.getSelectedIndex()>0 && !txtId.getText().equals("")){
            ResultSet resG;
            String idG="", idE="", idC="";
            conecta = new ConexionBD();
            String sql ="SELECT g.id_genero FROM generos g WHERE g.descripcion='"+cmbGeneros.getSelectedItem()+"'";
            System.out.println(sql);
            resG = conecta.consultar(sql);
            try{
                while(resG.next()){
                    idG=resG.getString("id_genero");
                    System.out.println("hola1");
                }
                System.out.println(idG);
            }catch(Exception e){
                System.out.println("error al consultar ids para los libros: "+e.getMessage());
            }
            String sqlactualiza = "UPDATE libros set titulo='"+txtTitulo.getText()+"',id_genero="+Integer.parseInt(idG)+" where id_libro='"+txtId.getText()+"'";
            System.out.println(sqlactualiza);
            try{
                conecta.operacionesAMB(sqlactualiza);
                JOptionPane.showMessageDialog(null, "Exito al actualizar informacion");
                txtId.setText("");
                txtTitulo.setText("");
                cmbGeneros.setSelectedIndex(0);
            }catch(SQLException ex){
                System.out.println("Error al actualizar libro error sql"+ex.getMessage());
                JOptionPane.showMessageDialog(null, "No se pudo actualizar el registro en libros error sql: "+ex.getMessage());
            }
            catch(Exception e){
                System.out.println("error al actualizar informacion de libros: "+e.getMessage());
                JOptionPane.showMessageDialog(null, "Error al actualizar informacion");
            }finally{
                conecta.cerrar();
            }
            panelL.remove(jtLibros);
            tablaL();
            repaint();
        }else{
            JOptionPane.showMessageDialog(null, "Por Favor verifica que todos los campos esten llenos y de buscar al autor");
        }
        */
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        // TODO add your handling code here:
        if(!txtId.getText().equals("")){
            conecta = new ConexionBD();
            try{
                String sqldelete = "DELETE FROM libros where id_libro='"+txtId.getText()+"'";
                conecta.operacionesAMB(sqldelete);
                JOptionPane.showMessageDialog(null, "Registro eliminado");
                txtId.setText("");
                txtTitulo.setText("");
                //cmbGeneros.setSelectedIndex(0);
            }catch(SQLException ex){
                System.out.println("Error al borrar libro error sql"+ex.getMessage());
                JOptionPane.showMessageDialog(null, "No se pudo borrar el registro en libros error sql: "+ex.getMessage());
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error al eliminar libro");
                System.out.println("Error al eliminar genero "+e.getMessage());
            }finally{
                conecta.cerrar();
            }
            panelL.remove(jtLibros);  
            tablaL();
            repaint();
        }else{
            JOptionPane.showMessageDialog(null, "Por Favor seleccione un registro de la tabla");
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
        PaginaPrincipalAdministrador prin = new PaginaPrincipalAdministrador();
        prin.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void txtIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtIdKeyTyped

    private void jtLibrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtLibrosMouseClicked
        // TODO add your handling code here:
        conecta = new ConexionBD();
        ResultSet res;
        try{
            int Fila = jtLibros.getSelectedRow();
            String id = jtLibros.getValueAt(Fila, 0).toString();
            String sqlConsulta = "SELECT l.id_libro ,l.titulo, g.descripcion FROM libros l INNER JOIN generos g ON l.id_genero=g.id_genero WHERE id_libro="+Integer.parseInt(id);
            res = conecta.consultar(sqlConsulta);
            while(res.next()){
                txtId.setText(res.getString("id_libro"));
            }
        }catch (Exception e){
            System.out.println("error al cargar datos de la tabla a los campos en los prestamos: "+e.getMessage());
            
        }finally{
            conecta.cerrar();
        }
    }//GEN-LAST:event_jtLibrosMouseClicked

    
    void tablaL(){
        try{
            DefaultTableModel modelo = new DefaultTableModel();
            conecta = new ConexionBD();
            jtLibros.setModel(modelo);
            //String sql="SELECT l.id_libro, l.titulo, g.descripcion FROM libros l INNER JOIN generos g ON l.id_genero=g.id_genero ORDER BY l.id_libro;";
            String sql="SELECT\n" +
            "    l.id_libro,\n" +
            "    l.titulo,\n" +
            "    g.descripcion,\n" +
            "    (\n" +
            "        SELECT CONCAT(a.nombre,' ',a.ap,' ',a.am)\n" +
            "        FROM autores a\n" +
            "        INNER JOIN asigna_autores aa ON aa.id_autor = a.id_autor\n" +
            "        WHERE aa.id_libro = l.id_libro\n" +
            "        LIMIT 1\n" +
            "    ) AS autor,\n" +
            "    (\n" +
            "        SELECT COUNT(c.codigo_copia)\n" +
            "        FROM copias c\n" +
            "        WHERE c.id_libro = l.id_libro\n" +
            "    ) AS copias\n" +
            "FROM\n" +
            "    libros l\n" +
            "INNER JOIN generos g ON l.id_genero = g.id_genero\n" +
            "ORDER BY\n" +
            "    l.id_libro;";
            res = conecta.consultar(sql);
            ResultSetMetaData rsMd = (ResultSetMetaData) res.getMetaData();
            int cantidadColumnas = rsMd.getColumnCount();
            modelo.addColumn("ID");
            modelo.addColumn("Titulo");
            modelo.addColumn("Genero");
            modelo.addColumn("Autor Principal");
            modelo.addColumn("No. Copias Totales");
            
            int []anchos = {20, 220,80,150,150};
            for(int i=0;i<jtLibros.getColumnCount();i++){
                jtLibros.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
            }
            while (res.next()) {
                Object[] filas = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    filas[i] = res.getObject(i + 1);
                }
                modelo.addRow(filas);
            }
        }catch(SQLException ex){
            System.out.println("error sql tabla libros: "+ex.getMessage());
        }
        catch(Exception e){
            System.out.println("Error al mostrar datos de la tabla de libros: "+e.getMessage());
        }
        finally{
            conecta.cerrar();
        }
    }
    
    /*void llenar_genero(){
        try{
            conecta = new ConexionBD();
            String sqlGenero ="Select id_genero, descripcion from generos";
            resGenero = conecta.consultar(sqlGenero);
            //System.out.println(resGenero);
            while(resGenero.next()){
                String descripcion = resGenero.getString("descripcion");
                cmbGeneros.addItem(descripcion);
            }
        }catch(Exception e){
            System.out.println("Error al llenar combo de generos: "+e.getMessage());
        }finally{
            conecta.cerrar();
        }
    }*/
    
    /*public void registrarLibro(String titulo, int idGenero) {
    try {
        conecta = new ConexionBD();
        CallableStatement cs = conecta.conn.prepareCall("{call RegistrarLibro(?, ?, ?)}");
        cs.setString(1, titulo);
        cs.setInt(2, idGenero);
        cs.registerOutParameter(3, Types.VARCHAR);

        // Ejecutar el procedimiento almacenado
        cs.execute();

        // Obtener el mensaje de salida del procedimiento
        String mensaje = cs.getString(3);
        JOptionPane.showMessageDialog(null, mensaje);

        cs.close();
    }catch(SQLException ex){
            System.out.println("Error al insertar libro error sql"+ex.getMessage());
            JOptionPane.showMessageDialog(null, "No se pudo realizar el registro en libros error sql: "+ex.getMessage());
        } 
    catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al registrar libro: " + e.getMessage());
    } finally {
        conecta.cerrar();
    }
}*/

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Libros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Libros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Libros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Libros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        try {
            //UIManager.setLookAndFeel( new FlatLightLaf() );
            FlatMacLightLaf.setup();
        } catch( Exception ex ) {
            System.err.println( "Failed to initialize LaF" );
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Libros().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jtLibros;
    private javax.swing.JPanel panelL;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables
}
